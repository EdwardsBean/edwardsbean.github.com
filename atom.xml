<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mr Bean's Blog]]></title>
  <link href="http://EdwardsBean.github.io/atom.xml" rel="self"/>
  <link href="http://EdwardsBean.github.io/"/>
  <updated>2014-01-14T17:54:41+08:00</updated>
  <id>http://EdwardsBean.github.io/</id>
  <author>
    <name><![CDATA[EdwardsBean]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flume in Action(1)]]></title>
    <link href="http://EdwardsBean.github.io/blog/2014/01/14/flume-in-action-1/"/>
    <updated>2014-01-14T17:10:07+08:00</updated>
    <id>http://EdwardsBean.github.io/blog/2014/01/14/flume-in-action-1</id>
    <content type="html"><![CDATA[<h2>使用Flume Log4j Appender正确的姿势</h2>

<p>我们使用Flume-ng的LoadBalancingLog4jAppender，将线上服务的日志实时传输到日志服务器，转交给告警系统和HDFS做存储。<br/>
FLume的Log4j Appender必须使用Log4j的异步加载器，否则一旦日志服务器挂掉，将会导致应用服务器宕机。</p>

<h2>使用过程中的坑</h2>

<h4>问题1： Flume Log4j使用异步加载器，日志服务器宕机情况导致业务系统阻塞</h4>

<p>在阅读了Flume的RPC源码以及LoadBalancingLog4jAppender的实现之后，发现问题原来在Log4j的异步加载器AsyncAppender。异步加载器的原理见<a href="http://www.blogbus.com/blackgu-logs/163664173.html">这里</a><br/>
根本原因是、日志服务器宕机导致消费者消费能力不足，缓冲区满的情况下，AsyncAppender会阻塞程序。设置Blocking=false之后就可以了。</p>

<h4>问题2：Flume Log4j发送大量链接异常日志</h4>

<p>当其中一台日志服务器宕机，其他的日志服务器就会不停的接收到链接异常的日志。明显是重连的时间间隔太短。在LoadBalancingRpcClient中，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>while (it.hasNext()) {
</span><span class='line'>  HostInfo host = it.next();
</span><span class='line'>  try {
</span><span class='line'>    RpcClient client = getClient(host);
</span><span class='line'>    client.append(event); 
</span><span class='line'>    eventSent = true;
</span><span class='line'>    break;
</span><span class='line'>  } catch (Exception ex) {
</span><span class='line'>    selector.informFailure(host); //宕机情况标志该主机异常
</span><span class='line'>    LOGGER.warn("Failed to send event to host " + host, ex);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Flume默认不启用back off,也就是说selector.informFailure(host)这行代码完全没用。简直坑爹。OrderSelector.java:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  public void informFailure(T failedObject) {
</span><span class='line'>    //If there is no backoff this method is a no-op.
</span><span class='line'>    if (!shouldBackOff) {
</span><span class='line'>      return;
</span><span class='line'>    }
</span><span class='line'>    //将该主机暂时移除可用主机列表
</span><span class='line'>    ...
</span><span class='line'>    </span></code></pre></td></tr></table></div></figure>


<p>所以解决办法：配置max back off</p>

<h4>问题3：Flume Log4j失败重连策略异常</h4>

<p>问题体现在，设置了max back off,重连时间居然一直是2000ms,看了一下它的算法，指数退避算法。在OrderSelector.java的informFailure函数中。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  public void informFailure(T failedObject) {
</span><span class='line'>    //If there is no backoff this method is a no-op.
</span><span class='line'>    if (!shouldBackOff) {
</span><span class='line'>      return;
</span><span class='line'>    }
</span><span class='line'>    FailureState state = stateMap.get(failedObject);
</span><span class='line'>    long now = System.currentTimeMillis();
</span><span class='line'>    long delta = now - state.lastFail;
</span><span class='line'>    long lastBackoffLength = Math.min(maxTimeout, 1000 * (1 &lt;&lt; state.sequentialFails));
</span><span class='line'>    long allowableDiff = lastBackoffLength + CONSIDER_SEQUENTIAL_RANGE;
</span><span class='line'>    if (allowableDiff &gt; delta) {
</span><span class='line'>      if (state.sequentialFails &lt; EXP_BACKOFF_COUNTER_LIMIT) {
</span><span class='line'>        state.sequentialFails++;
</span><span class='line'>      }
</span><span class='line'>    } else {
</span><span class='line'>      state.sequentialFails = 1;
</span><span class='line'>    }
</span><span class='line'>    state.lastFail = now;
</span><span class='line'>    //Depending on the number of sequential failures this component had, delay
</span><span class='line'>    //its restore time. Each time it fails, delay the restore by 1000 ms,
</span><span class='line'>    //until the maxTimeOut is reached.
</span><span class='line'>    state.restoreTime = now + Math.min(maxTimeout, 1000 * (1 &lt;&lt; state.sequentialFails));
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>最后生成的restoreTime即下一次进行重试的时间。我没有去设置avro connect time out 和request time out，默认都是20s,应该算是偏长了。根据他的算法，delta永远是大于40s，但是allowableDiff却一直是3s,4s.所以我直接改了判定条件，allowableDiff &lt; delta,之后就正常。但是还存在一个问题，sequentialFails并不会在一段时间后reset.</p>

<h3>问题4：Log4j异步加载器丢失日志数据</h3>

<p>AsyncAppender默认缓冲区大小128，满了之后会丢失数据。调大缓冲区，avro connect time out 和request time out也得适当调一下</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改Flume Log4j Appender]]></title>
    <link href="http://EdwardsBean.github.io/blog/2013/12/26/modify-flume-log4j-appender/"/>
    <updated>2013-12-26T11:20:47+08:00</updated>
    <id>http://EdwardsBean.github.io/blog/2013/12/26/modify-flume-log4j-appender</id>
    <content type="html"><![CDATA[<h2>自定义Log4j Appender</h2>

<p>要修改Flume Log4j Appender的实现，我们先了解一下Log4j Appender是如何自定义的。</p>

<p>自定义log4j appender需要继承log4j公共的基类：AppenderSkeleton</p>

<ul>
<li>打印日志核心方法：abstract protected void append(LoggingEvent event);</li>
<li>初始化加载资源：public void activateOptions()，默认实现为空</li>
<li>释放资源：public void close()</li>
<li>是否需要按格式输出文本：public boolean requiresLayout()</li>
<li>正常情况下我们只需要覆盖append方法即可。然后就可以在log4j中使用了</li>
</ul>


<p>Demo:</p>

<pre><code>1. import org.apache.log4j.AppenderSkeleton;  
2. import org.apache.log4j.spi.LoggingEvent;  
3.   
4. public class HelloAppender extends AppenderSkeleton {  
5.   
6.     private String account ;  
7.       
8.     @Override  
9.     protected void append(LoggingEvent event) {  
10.         System.out.println("Hello, " + account + " : "+ event.getMessage());  
11.     }  
12.   
13.     @Override  
14.     public void close() {  
15.         // TODO Auto-generated method stub  
16.   
17.     }  
18.   
19.     @Override  
20.     public boolean requiresLayout() {  
21.         // TODO Auto-generated method stub  
22.         return false;  
23.     }  
24.   
25.     public String getAccount() {  
26.         return account;  
27.     }  
28.   
29.     public void setAccount(String account) {  
30.         this.account = account;  
31.     }  
32. }  
</code></pre>

<hr />

<pre><code>1. public static void main(String[] args) {  
2.     Log log = LogFactory.getLog("helloLog") ;  
3.     log.info("I am ready.") ;  
4. }  
</code></pre>

<p><em>log4j.properties 配置</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>log4j.logger.helloLog=INFO, hello
</span><span class='line'>
</span><span class='line'>log4j.appender.hello=HelloAppender
</span><span class='line'>log4j.appender.hello.account=World</span></code></pre></td></tr></table></div></figure>


<p>执行main函数，输出结果
Hello, World : I am ready.</p>

<h2>修改FLume Log4j Appender</h2>

<h3>Event Header加入appname,hostname,logtype</h3>

<p>由于hostname,logtype是固定不变的。所以直接写死在代码中。appname则用log4j.properties进行配置
&ndash; appname在log4j.properties中配置,添加：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#应用程序名
</span><span class='line'>log4j.appender.flume.Appname = 91pc</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在Log4jAppender类中添加：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private String appname;
</span><span class='line'>
</span><span class='line'>public String getAppname() {
</span><span class='line'>  return appname;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>public void setAppname(String appname) {
</span><span class='line'>  this.appname = appname;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>hostname,logtype在Log4jAppender类中添加</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//author:scy
</span><span class='line'>try {
</span><span class='line'>  hdrs.put("hostname", InetAddress.getLocalHost()+"");
</span><span class='line'>} catch (UnknownHostException e1) {
</span><span class='line'>      String msg = "Cant't get localhost IP";
</span><span class='line'>      LogLog.error(msg);
</span><span class='line'>      if (unsafeMode) {
</span><span class='line'>        return;
</span><span class='line'>      }
</span><span class='line'>      throw new FlumeException(msg + " Exception follows.", e1);
</span><span class='line'>}
</span><span class='line'>//author:scy Need to alarm(&gt;Info)
</span><span class='line'>if(event.getLevel().toInt() &gt; 20000){
</span><span class='line'>  hdrs.put("logtype", "alarm");
</span><span class='line'>}else{
</span><span class='line'>  hdrs.put("logtype", "log4j");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Flume Log4j Appender添加log4j的异常详细信息</h3>

<p>由于Flume Log4j Appender并没有将Log4j的错误异常栈详细信息封装到Event中，不利于我们的告警系统分析原因。
Log4jAppender.append()中添加如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Event flumeEvent;
</span><span class='line'>Object message = event.getMessage();
</span><span class='line'>if (message instanceof GenericRecord) {
</span><span class='line'>..
</span><span class='line'>} else {
</span><span class='line'>  hdrs.put(Log4jAvroHeaders.MESSAGE_ENCODING.toString(), "UTF8");
</span><span class='line'>  //按照log4j.properties配置格式化日志
</span><span class='line'>  String msg = layout != null ? layout.format(event) : message.toString();
</span><span class='line'>        
</span><span class='line'>  //author:edwardsbean
</span><span class='line'>  if(layout.ignoresThrowable()) {
</span><span class='line'>      String[] s = event.getThrowableStrRep();
</span><span class='line'>      if (s != null) {
</span><span class='line'>  int len = s.length;
</span><span class='line'>  for(int i = 0; i &lt; len; i++) {
</span><span class='line'>      msg += s[i];
</span><span class='line'>      msg += Layout.LINE_SEP;
</span><span class='line'>  }
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  flumeEvent = EventBuilder.withBody(msg, Charset.forName("UTF8"), hdrs);
</span><span class='line'>}
</span><span class='line'>try {
</span><span class='line'>  rpcClient.append(flumeEvent);</span></code></pre></td></tr></table></div></figure>


<p>日志接收端就可以接受到日志的详细信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [x] Received '2013-12-26 10:38:08 user log detail
</span><span class='line'> [nd-PC2600/192.168.253.126] FATAL [com.xx.test.Main] java.lang.Exception: error detail
</span><span class='line'>  at com.xx.test.Main.main(Main.java:35)</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Blog]]></title>
    <link href="http://EdwardsBean.github.io/blog/2013/12/24/my-first-blog/"/>
    <updated>2013-12-24T13:01:34+08:00</updated>
    <id>http://EdwardsBean.github.io/blog/2013/12/24/my-first-blog</id>
    <content type="html"><![CDATA[<ul>
<li>this is content</li>
<li>测试中文</li>
</ul>

]]></content>
  </entry>
  
</feed>
